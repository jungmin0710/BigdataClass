n,m = map(int, input().split()) #얼음틀의 크기 입력받기
graph = [] #입력될 틀 모양을 담을 빈 리스트 준비

#2차원 리스트 정보 입력받기
for i in range(n):
  graph.append(list(map(int,input()))) #n줄만큼 입력된 값을 정수형으로 바꾸어 리스트형태로 그래프에 추가(2차원리스트 생성됨)


#dfs: 특정 노드들을 방문하고 해당 노드에 연결된 모든 노드들도 방문(함수로 정의)
def dfs(x,y):
  if x <= -1 or x >= n or y <= -1 or y >= m: #얼음틀 범위에 입력값이 없으면 False반환(범위 밖은 벽으로 막혀있음)
    return False
  if graph[x][y] == 0:  #해당 노드 값이 0이면(비어있으면)
    graph[x][y] = 1     #1로 바꾼다(방문했다는 표시)
    dfs(x-1, y)         #재귀함수로 상하좌우 노드를 방문
    dfs(x, y-1)
    dfs(x+1, y)
    dfs(x, y+1)
    return True         #모든 노드를 방문 후 false가 나올 때(둘러싸인 모든 벽을 확인했을때:모든 주변노드중 false가 나오면 벽을 확인한 것) True를 반환)

#모든 노드에서 빈칸을 찾아서 음료수 채우기
result = 0  #초기출력값 0으로 설정
for i in range(n):  #중복으로 반복시킨다
  for j in range(m):
    if dfs(i,j) ==True: #해당 칸의 주변이 막혀있으면
      result += 1 #결과값에 1을 더한다(탐색 끝)



#최종결과 출력 : 아이스크림의 개수 구하기
print(result)
